#include "Window.hpp"


Window::Window()
{
	Status = Errors::WindowNotInit;
	if (Initialize() != Errors::WindowSuccess.id)
	{
		Finalize();
	};
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////* INITIALIZATION *////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int Window::Initialize()
{
	if (Status.id == Errors::WindowNotInit.id) 
	{ 
		InitGLFW(); 
		SetGLFWParameters();
	}
	
	if (Status.id == Errors::WindowNotInit.id) 
	{ 
		MakeWindow(); 
		SetGLFWBuffer();
		SetViewportSize();
		SetGLFWContext();
	}

	if (Status.id == Errors::WindowNotInit.id) 
	{ 
		InitGLEW(); 
	}

	if (Status.id == Errors::WindowNotInit.id) 
	{ 
		Success(); 
	}

	return Status.id;
}

void Window::InitGLFW()
{
	if (!glfwInit() )
	{
		Status = Errors::WindowFail;
		std::cout << TITLE << ": glfwInit failed.\n";
	}
}

void Window::InitGLEW()
{
	glewExperimental = bOpenGLUseExperimental; // Is advised to include in case developer wants to use any new features
	if (glewInit() != GLEW_OK)
	{
		Status = Errors::WindowFail;
		std::cout << TITLE << ": glewInit failed.\n";
	}
	if (!GLEW_EXT_framebuffer_object) {}; // This will automatically call an exception if the extension does not exist
}

bool Window::Ready()
{
	return Status.id == Errors::WindowSuccess.id;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////* SETTERS *////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Window::SetGLFWParameters()
{
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, OpenGLVersionMajor);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, OpenGLVersionMinor);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, bOpenGLAllowForwardCompat); // Allows forward compatibility
}

void Window::SetGLFWBuffer()
{
	glfwGetFramebufferSize(glfwWindow, &bufferWidth, &bufferHeight);
}

void Window::SetGLFWContext()
{
	glfwMakeContextCurrent(glfwWindow);
}

void Window::SetViewportSize()
{
	glViewport(0, 0, bufferWidth, bufferHeight);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////* GETTERS *////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int Window::GetStatusID()
{
	return Status.id;
}

std::string Window::GetStatusText()
{
	return Status.text;
}

GLFWwindow* Window::GetAppWindow()
{
	return glfwWindow;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////* FINALIZATION *////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Window::Finalize()
{
	std::cout << GetStatusText() << "\n";
	glfwDestroyWindow(glfwWindow);
	glfwTerminate();
}

void Window::Success()
{
	Status = Errors::WindowSuccess;
	std::cout << TITLE << ": Succesfully initialized.\n";
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////* WINDOW *////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Window::MakeWindow()
{
	glfwWindow = glfwCreateWindow(WIDTH, HEIGHT, TITLE, NULL, NULL);
	if (!glfwWindow)
	{
		Status = Errors::WindowFail;
		std::cout << TITLE << ": glfwCreateWindow failed.\n";
	}
}